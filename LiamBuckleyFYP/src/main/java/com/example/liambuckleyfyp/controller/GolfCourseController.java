//Below code is generated by GitHub Copilot and modified by me to fit my project requirements.
// `src/main/java/com/example/liambuckleyfyp/controller/GolfCourseController.java`
// `src/main/java/com/example/liambuckleyfyp/controller/GolfCourseController.java`
package com.example.liambuckleyfyp.controller;

import com.example.liambuckleyfyp.service.SendGridEmailService;
import jakarta.persistence.MapKeyColumn;
import jakarta.servlet.http.HttpSession;
import com.example.liambuckleyfyp.model.GolfCourse;
import com.example.liambuckleyfyp.service.GolfCourseService;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class GolfCourseController {

    // Creates a logger instance for the GolfCourseController class
    private static final Logger logger = LoggerFactory.getLogger(GolfCourseController.class.getName());

    @Autowired
    private GolfCourseService golfCourseService;

    @Autowired
    private SendGridEmailService emailService;

    // Handles GET requests to "/golfcourses" and returns a list of all golf courses
    @GetMapping("/golfcourses")
    public String getAllGolfCourses(Model model, HttpSession session) {
        List<GolfCourse> golfCourses = golfCourseService.getAllGolfCourses();
        model.addAttribute("golfCourses", golfCourses);
        String userLogin = (String) session.getAttribute("userLogin");
        model.addAttribute("userLogin", userLogin);
        return "golfcourse_list";
    }

    // Handles GET requests to "/golfcourse/{id}" and returns details of a specific golf course
    @GetMapping("/golfcourse/{id}")
    public String getGolfCourseDetails(@PathVariable("id") int id, Model model) {
        GolfCourse golfCourse = golfCourseService.getGolfCourseById(id);
        model.addAttribute("golfCourse", golfCourse);
        // Log the times map
        logger.info("GolfCourse times: " + golfCourse.getTimes());
        return "individualgolfcourse";
    }

    @PostMapping("/book")
    public String bookTime(@RequestParam("golfCourseId") Long golfCourseId, @RequestParam("time") String time, @RequestParam("date") String date, Model model, HttpSession session) {
        // Retrieve the golf course by its ID
        GolfCourse golfCourse = golfCourseService.getGolfCourseById(golfCourseId.intValue());
        // Add the golf course, time, and date to the model
        model.addAttribute("golfCourse", golfCourse);
        model.addAttribute("time", time);
        model.addAttribute("date", date);

        // Retrieve the user login from the session and add it to the model
        String userLogin = (String) session.getAttribute("userLogin");
        model.addAttribute("userLogin", userLogin);

        // Send booking confirmation email
        String to = "liambuckley381@gmail.com"; // Replace with the recipient's email address
        String subject = "Booking Confirmation via TeeFinder";
        String text = "Hello " + to + ",\n\nLiam Buckley has booked a time slot at " + golfCourse.getName() + " on " + date + " at " + time + ".\n\nThank you for using TeeFinder ⛳️.";
        try {
            // Call the email service to send the booking confirmation email
            emailService.sendBookingConfirmation(to, subject, text);
        } catch (IOException e) {
            // Handle the exception (e.g., log it, show an error message)
            logger.error("Failed to send booking confirmation email", e);
            model.addAttribute("errorMessage", "Failed to send booking confirmation email. Please try again later.");
            return "error_page"; // Replace with your error page
        }

        // Return the booking confirmation view
        return "booking_confirmation";
    }
    //Handles GET requests to "/search" and returns a list of golf courses available on a specific date
    @GetMapping("/search")
    public String search(@RequestParam("date") String date, Model model) {
        List<GolfCourse> golfCourses = golfCourseService.findGolfCoursesByDate(date);
        model.addAttribute("golfCourses", golfCourses);
        return "golfcourse_list";
    }
    //Handles GET requests to "/searchByName" and returns a list of golf courses with a specific name
    @GetMapping("/searchByName")
    public String searchByName(@RequestParam("name") String name, Model model) {
        List<GolfCourse> golfCourses = golfCourseService.findGolfCoursesByName(name);
        model.addAttribute("golfCourses", golfCourses);
        return "golfcourse_list";
    }

}
//References
//GitHub Co-pilot
//License to: Liam Buckley(liambuckley02)
//License restriction: For educational use only
//Valid through: November 2nd 2025